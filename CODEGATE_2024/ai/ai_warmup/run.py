import requests
import time
import json
import os
import sys
from colorama.ansi import clear_screen
from colorama import Fore, Back, Style
import hashlib
import string
import random
import signal
col = [Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE]

blacklist = [
    "cat",
    "grep",
    "nano",
    "subprocess",
    "input",
    "sys",
    "execfile",
    "builtins",
    "dict",
    "for",
    "dir",
    "file",
    "input",
    "write",
    "while",
    "print",
    "int",
    "nc",
    "/dev/tcp/",
    "socket",
    "TCPSocket",
    "curl",
    "wget",
    "request",
    "-display",
    "xhost",
    "bash",
    "sh", 
    "<",
    ">"
]

ai_url = os.environ.get('AI_URL')
if ai_url == None:
    import sys
    print("[!] AI_URL not specified")
    sys.exit(0)
    
def submit_request(prompt, request_url = f"http://{ai_url}/api/chat", stream = False):
    req = {
        "model": "llama3",
        "messages": prompt,
        "stream": stream
    }

    resp = requests.post(request_url, json=req)
    return resp.json()

def python_generator(user_input):
    user_query = [
            {
                "role":"system",
                "content": """1.From now on, all responses will be delivered to the user in JSON format.
2.I will act as a Python code generator. When creating code, do not use code blocks; just produce the code as a string.
3.Record the Python code that is created in the "answer" field of the JSON format and deliver it to the user.
4. An example would be {"answer": "print('hello world')"}."""
            },
            {
                "role": "user",
                "content": f"{user_input} and only provide responses as JSON data."
            },

    ]

    for i in range(10):
        result = submit_request(user_query)
        message = result.get("message")
        if not message:
            continue
        
        content = message.get("content")
        if not content:
            continue

        try:
            check_firewall_json = json.loads(content)
        except json.decoder.JSONDecodeError:
            continue
        
        code_result = check_firewall_json.get("answer")
        if not code_result:
            continue

        return code_result, i
    return None, None

salt_length = 16
difficulty = 4

def load_balancing():
    rand_str = ''.join(random.sample(string.ascii_letters + string.digits, salt_length + difficulty))
    salt = "".join(rand_str[:salt_length])
    correct_str = "".join(rand_str[salt_length:])
    hash_str = hashlib.sha256(rand_str.encode()).hexdigest()
    print(f"sha256({salt} + {'X' * difficulty}) == {hash_str}")
    input_str = input("Give me X: ")
    if input_str == correct_str:
        return False
    return True

def main():

    user_input = input("User input:")
    result, count = python_generator(user_input)
    if not result:
        print("The result generated by the GPT is incorrect. Please try again.")
        return

    print(f"----------------{Fore.BLUE}<GPT Code Make result>{Style.RESET_ALL}----------------")
    print(result)

    for x in blacklist:
        if x in result:
            print(f"\n{Fore.RED}Blocked!!!!!!!!!!!!!!!{Style.RESET_ALL}")
            input(f"\n{Fore.GREEN}Press any key to continue...{Style.RESET_ALL}")
            return

    print(f"----------------{Fore.RED}<GPT Code Run result>{Style.RESET_ALL}----------------")
    try:
        exec(result)
        print(f"\n{Fore.RED}The exception handling was triggered in the code.{Style.RESET_ALL}")

    except Exception as e:
        print(f"Error message: {e}")
        input(f"\n{Fore.GREEN}Press any key to continue...{Style.RESET_ALL}")
        return
    print("-------------------------------------------------")
    
    input(f"\n{Fore.GREEN}Press any key to continue...{Style.RESET_ALL}")

if __name__ == "__main__":
    signal.alarm(300)
    if load_balancing():
        print("failed.")
        sys.exit(0)
    for _ in range(5):
        os.system("clear")
        main()


